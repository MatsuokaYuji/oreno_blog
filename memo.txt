・Next.jsを使うメリット
クライアントPCに依存せずにレンダリングできる
直感的なルーティング設計ができる
ページ読み込み速度が向上
SEO対策になる
APIエンドポイント設計もできる
など

・プリレンダリングとは
HTMLが事前に構成されている
JavaScriptを無効にしてもOK
ユーザーが安心できる

・SSG,SSR
Static Site Generator
ビルドした際にHTMLのみ出力
めっちゃ早いレスポンス
ブログ、ドキュメント、商品ページなど

サーバーサイドレンダリング
reqを投げたタイミングでレンダリングする
Twitterの投稿的なPOST、SNSタイムライン、プロフィール

postに書くだけでroutingできて便利
LINKコンポーネントはリロードせずにページ遷移している、高速
SEO対策するならタグがあった方がいいらしい


・CSSmodule
・一意のクラス名を自動的に生成
ここで、ブラウザの開発ツールで HTML を見ると、コンポーネントdivによってレンダリングされたにはLayout次のようなクラス名があることがわかります
layout_container__...。
これがCSS モジュールの機能です。一意のクラス名が自動的に生成されます。
CSS モジュールを使用している限り、クラス名の衝突を心配する必要はありません。
さらに、Next.js のコード分割機能はCSS モジュールでも機能します。これにより、各ページにロードされる CSS の量が最小限に抑えられます。これにより、バンドル サイズが小さくなります。


zshでcurl投げた時のエラー解決
https://qiita.com/ponsuke0531/items/8dd9ba566a13edc03fe2

1ページあたり50件の記事の1ページを取得。つまり50件
curl  "https://qiita.com/api/v2/items?page=1&per_page=50"

https://qiita.com/api/v2/items?page=1&per_page=50&query=created:>2023-05-25+stocks:>20


curl  "https://qiita.com/api/v2/items?page=1&per_page=50&query=created:>2023-05-25+stocks:>20"



TypeError: Cannot read properties of null (reading 'content')
    at r (main-d5c9aef8f3ea3bae.js:1:4685)
    at main-d5c9aef8f3ea3bae.js:1:4551
    at Array.forEach (<anonymous>)
    at Object.updateHead (main-d5c9aef8f3ea3bae.js:1:4539)
    at Object.n [as _pendingUpdate] (main-d5c9aef8f3ea3bae.js:1:84272)
    at main-d5c9aef8f3ea3bae.js:1:84544
    at uI (framework-305cb810cde7afac.js:9:84120)
    at oU (framework-305cb810cde7afac.js:9:113183)
    at o (framework-305cb810cde7afac.js:9:107736)
    at x (framework-305cb810cde7afac.js:33:1364)